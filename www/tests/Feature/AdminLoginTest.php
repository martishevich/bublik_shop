<?php

namespace Tests\Feature;

use App\Http\Middleware\VerifyCsrfToken;
use App\Product;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;

class AdminLoginTest extends TestCase
{

    protected $response;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutMiddleware(VerifyCsrfToken::class);
        $this->response = $this->json('POST', '/login', [
            'email'    => '123456@gmail.com',
            'password' => '123456',
        ]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testLogin()
    {
        $this->response
            ->assertStatus(302)
            ->assertLocation('/home');

    }

    public function testProducts()
    {
        $this->response = $this->get('/home/products');
        $this->response
            ->assertStatus(200)
            ->assertSee('category_id')
            ->assertSee('Products list');
    }

    public function testCreateProduct()
    {
        $this->response = $this->get('/home/products/create');

        $this->response
            ->assertStatus(200)
            ->assertSee('Create new product');

        //проверить, если с таким именем есть, то удалить и потом добавить
        $this->response = $this->post('/home/products/create', [
            'category_id' => '1',
            'name'        => 'HsdfjU7ew9HkaejjeHfkej829djFHs',
            'price'       => '999999',
            'is_active'   => '1',
            'description' => 'Hsdfna8asfHKUHDFsdf8sdHFs',
            'short_disc'  => 'Kdsflgkj8w42jkFsdf8JFk'
        ]);

        $this->assertDatabaseHas('products', [
            'category_id' => '1',
            'name'        => 'HsdfjU7ew9HkaejjeHfkej829djFHs',
            'price'       => '999999',
            'is_active'   => '1',
            'description' => 'Hsdfna8asfHKUHDFsdf8sdHFs',
            'short_disc'  => 'Kdsflgkj8w42jkFsdf8JFk'
        ]);
    }

    /**
     * @depends testCreateProduct
     */
    public function testEditProduct()
    {
        $id = Product::getLastId()[0]->max;

        $this->response = $this->get("/home/products/edit/$id");
        $this->response
            ->assertStatus(200)
            ->assertSee('HsdfjU7ew9HkaejjeHfkej829djFHs')
            ->assertSee('Hsdfna8asfHKUHDFsdf8sdHFs');

        $this->response = $this->post("/home/products/edit/$id", [
            'category_id' => '2',
            'name'        => 'kdfgjSDG9SDjsdf8sd9sdf80ndhjjdsoKJKH',
            'price'       => '22222',
            'is_active'   => '0',
            'description' => 'HBsdfi8NslPOKJsd987dch2',
            'short_disc'  => '111111111111'
        ]);

        $this->assertDatabaseHas('products', [
            'category_id' => '2',
            'name'        => 'kdfgjSDG9SDjsdf8sd9sdf80ndhjjdsoKJKH',
            'price'       => '22222',
            'is_active'   => '0',
            'description' => 'HBsdfi8NslPOKJsd987dch2',
            'short_disc'  => '111111111111'
        ]);
        return $id;
    }

    /**
     * @depends testEditProduct
     */
    public function testDeleteProduct($id)
    {

        $this->assertDatabaseHas('products', [
            'category_id' => '2',
            'name'        => 'kdfgjSDG9SDjsdf8sd9sdf80ndhjjdsoKJKH',
            'price'       => '22222',
            'is_active'   => '0',
            'description' => 'HBsdfi8NslPOKJsd987dch2',
            'short_disc'  => '111111111111'
        ]);

        $this->response = $this->json('get', "/home/products/delete/$id");

        $this->assertSoftDeleted('products', [
            'id'          => $id,
            'category_id' => '2',
            'name'        => 'kdfgjSDG9SDjsdf8sd9sdf80ndhjjdsoKJKH',
            'price'       => '22222',
            'is_active'   => '0',
            'description' => 'HBsdfi8NslPOKJsd987dch2',
            'short_disc'  => '111111111111'
        ]);
    }

}
